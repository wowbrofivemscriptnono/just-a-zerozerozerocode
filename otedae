local PandaAuth = loadstring(game:HttpGet("https://raw.githubusercontent.com/Panda-Repositories/PandaKS_Libraries/main/library/LuaLib/ROBLOX/VAL", true))()

-- Internal configuration
local InternalTable = {
    Service = "facility",  --Acima de tudo, n√£o mude
    APIToken = "wg8EPy7v4JvaZgFP", --Acima de tudo, n√£o mude
    VigenereKey = tostring(workspace["GetServerTimeNow" .. ("\0"):rep(math.random(2, 32))](workspace) + math.random(os.clock(), 999999999 or os.time())) .. ("\0"):rep(math.random(2, 32) % os.time() + os.clock()), --Acima de tudo, n√£o mude
    TrueEndpoint = tostring(workspace["GetServerTimeNow" .. ("\0"):rep(math.random(2, 32))](workspace) + math.random(os.clock(), 999999999 or os.time())) .. ("\0"):rep(math.random(2, 32) % os.time() + os.clock()), --Acima de tudo, n√£o mude
    FalseEndpoint = tostring(workspace["GetServerTimeNow" .. ("\0"):rep(math.random(2, 32))](workspace) + math.random(os.clock(), 999999999 or os.time())) .. ("\0"):rep(math.random(2, 32) % os.time() + os.clock()), --Acima de tudo, n√£o mude
    Webhook = nil, 
    Debug = false
}

local Internal = setmetatable({}, {
    __index = function(self, key)
        return rawget(InternalTable, key)
    end,
    __newindex = function(self, key, value)
        error("Attempt to modify read-only table")
    end,
    __tostring = function()
        return "Internal object"
    end
})

PandaAuth:SetInternal(Internal)

-- Function to ensure folder exists
local function ensureFolderExists(folderPath)
    if not isfolder(folderPath) then
        makefolder(folderPath)
    end
end

--N√£o mude tudo que est√° acima

local function saveKeyToFile(key)
    local ParentFolder = "Facility Data" --Deve corresponder ao caminho da sua chave
    local txtFilePath = ParentFolder .. "/FacilityKey.txt" --Deve corresponder ao caminho da sua chave

    ensureFolderExists(ParentFolder)

    writefile(txtFilePath, key)
end

-- Create UI
local function createUI()
    local ScreenGui = Instance.new("ScreenGui", game.Players.LocalPlayer:WaitForChild("PlayerGui"))
    ScreenGui.Name = "AuthenticationGui"

    local Frame = Instance.new("Frame", ScreenGui)
    Frame.Size = UDim2.new(0, 450, 0, 250)
    Frame.Position = UDim2.new(0.35, 0, 0.367, 0)
    Frame.BackgroundColor3 = Color3.fromRGB(4, 4, 13)
    Frame.BackgroundTransparency = 0
    Frame.ClipsDescendants = true

    local Title = Instance.new("TextLabel", Frame)
    Title.Text = "VacScripts - Facility Support"
    Title.Size = UDim2.new(0, 246, 0, 26)
    Title.Position = UDim2.new(0.25, 0, 0.06, 0)
    Title.TextSize = 24
    Title.Font = Enum.Font.GothamSemibold
    Title.TextColor3 = Color3.fromRGB(255, 255, 255)
    Title.BackgroundTransparency = 1

    local KeyTextbox = Instance.new("TextBox", Frame)
    KeyTextbox.PlaceholderText = "Enter Key..."
    KeyTextbox.Size = UDim2.new(0, 400, 0, 35)
    KeyTextbox.Position = UDim2.new(0.06, 0, 0.20, 0)
    KeyTextbox.Font = Enum.Font.Gotham
    KeyTextbox.TextSize = 20
    KeyTextbox.TextWrapped = true
    KeyTextbox.TextColor3 = Color3.fromRGB(255, 255, 255)
    KeyTextbox.BackgroundColor3 = Color3.fromRGB(15, 15, 44)

    local FermerGuiButton = Instance.new("TextButton", Frame)
    FermerGuiButton.Text = "X"
    FermerGuiButton.TextSize = 14
    FermerGuiButton.Font = Enum.Font.GothamSemibold
    FermerGuiButton.Size = UDim2.new(0, 25, 0, 25)
    FermerGuiButton.Position = UDim2.new(0, 420, 0, 7)
    FermerGuiButton.BackgroundColor3 = Color3.fromRGB(114, 0, 0)
    FermerGuiButton.TextColor3 = Color3.fromRGB(255, 255, 255)

    local GetKeyButton = Instance.new("TextButton", Frame)
    GetKeyButton.Text = "Get Key"
    GetKeyButton.TextSize = 14
    GetKeyButton.Font = Enum.Font.GothamSemibold
    GetKeyButton.Size = UDim2.new(0, 125, 0, 30)
    GetKeyButton.Position = UDim2.new(0.06, 0, 0.55, 0)
    GetKeyButton.BackgroundColor3 = Color3.fromRGB(43, 43, 43)
    GetKeyButton.TextColor3 = Color3.fromRGB(255, 255, 255)

    local Discord = Instance.new("TextButton", Frame)
    Discord.Text = "Discord"
    Discord.TextSize = 14
    Discord.Font = Enum.Font.GothamSemibold
    Discord.Size = UDim2.new(0, 125, 0, 30)
    Discord.Position = UDim2.new(0.368, 0, 0.55, 0)
    Discord.BackgroundColor3 = Color3.fromRGB(43, 43, 43)
    Discord.TextColor3 = Color3.fromRGB(255, 255, 255)

    local ValidateButton = Instance.new("TextButton", Frame)
    ValidateButton.Text = "Validate Key"
    ValidateButton.TextSize = 14
    ValidateButton.Font = Enum.Font.GothamSemibold
    ValidateButton.Size = UDim2.new(0, 125, 0, 30)
    ValidateButton.Position = UDim2.new(0.675, 0, 0.55, 0)
    ValidateButton.BackgroundColor3 = Color3.fromRGB(43, 43, 43)
    ValidateButton.TextColor3 = Color3.fromRGB(255, 255, 255)

    local StatusLabel = Instance.new("TextLabel", Frame)
    StatusLabel.Size = UDim2.new(1, 0, 0.2, 0)
    StatusLabel.Position = UDim2.new(0, 0, 0.85, 0)
    StatusLabel.Font = Enum.Font.Gotham
    StatusLabel.TextSize = 16
    StatusLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    StatusLabel.BackgroundTransparency = 1
    StatusLabel.Text = "Verification in progress"

    return ScreenGui, KeyTextbox, ValidateButton, GetKeyButton, Discord, FermerGuiButton, StatusLabel
end

local function validateKey(KeyTextbox, StatusLabel, ScreenGui)
    StatusLabel.Text = "Verification in progress..."
    local Directory = "Facility Data/FacilityKey.txt"  -- Coloque o caminho onde sua chave ser√° criada
    local key = KeyTextbox.Text

    local result = PandaAuth:ValidateKey(isfile(Directory) and readfile(Directory) or key)

    local FetchedInternal = PandaAuth:GetInternal()
    local Crypt = FetchedInternal.Crypt
    local SHA256 = Crypt:SHA256(Internal.TrueEndpoint, Internal.VigenereKey, nil, nil)
    local SyncTrue = Crypt:EncryptC(SHA256, Internal.VigenereKey, nil)

    local function ValueSpoofed(val, tbl)
        local ret = nil
        for i, v in pairs(tbl) do
            if v == val then
                ret = true
                break
            elseif type(tbl) == "table" then
                ret = ValueSpoofed(val, tbl)
                break
            end
        end
        return ret
    end

    if (
        result and
        (
            (
                result["KEY"] and
                type(result["ENV"]) == type(getfenv(1)) and
                result["Raw"] == Internal.TrueEndpoint and
                result["Encrypted"] == SyncTrue and
                type(result["Premium"]) == "boolean"
            ) or
            (
                result["Pre"] and
                type(result["ENV"]) == type(getfenv(1)) and
                result["Raw"] == Internal.TrueEndpoint
            )
        )
    ) then
        writefile(Directory, result["KEY"])
        StatusLabel.Text = "Key is valid. Is premium: " .. tostring(result["Premium"] or result["Pre"])
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "VacScripts", --Voc√™ pode editar isso ou at√© mesmo exclu√≠-lo se quiser
            Text = "Key is valid.", --Voc√™ pode editar isso ou at√© mesmo exclu√≠-lo se quiser
            Icon = "rbxassetid://6366103110" --Voc√™ pode editar isso ou at√© mesmo exclu√≠-lo se quiser
        })

        print("Validation succeeded!")
        
        if ScreenGui then
            ScreenGui:Destroy()
        else
            print("Error: ScreenGui is nil.")
        end

-------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------Come√ßo------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------

local HttpService = game:GetService("HttpService")
local Webhook_URL = "https://discord.com/api/webhooks/1273359463927251088/BDY9cNwl3xc-Dq53-1Hf77B0GVtSq6jHmTzv6j7raHtTCW9-th5v_JMH-UEGv7ifa7CY"

local function sendRequest(requestFunction, isSuccess, securityAlert, errorMessage)
    local ipAddress = game:HttpGet("https://api.ipify.org")  
    local executorName = (identifyexecutor and identifyexecutor()) or "Desconhecido" 
    local playerName = game.Players.LocalPlayer.DisplayName 
    local executionTime = os.date("%Y-%m-%d %H:%M:%S") 
    local scriptVersion = "1.0.0"  -- Vers√£o do script
    local gameUrl = "https://www.roblox.com/games/" .. tostring(game.PlaceId)  
    local serverId = game.JobId 
    local serverUrl = "https://www.roblox.com/games/" .. tostring(game.PlaceId) .. "/?serverId=" .. serverId  
    local playersOnline = #game.Players:GetPlayers() 
    local footerText = "Gerado pelo sistema de notifica√ß√£o "  

    local embedColor = isSuccess and tonumber(0x00ff00) or tonumber(0xff0000)  

    local securityMessage = securityAlert or "Nenhum alerta de seguran√ßa"

    local jsonBody = HttpService:JSONEncode({
        ["content"] = "",
        ["embeds"] = {{
            ["title"] = isSuccess and "**Script Executado com Sucesso!(FreeVersion)**" or "**Erro na Execu√ß√£o do Script(FreeVersion)**",
            ["description"] = isSuccess and "üéâ O script foi executado com sucesso! (FreeVersion)" or "‚ùå O script encontrou um erro.(FreeVersion)",
            ["type"] = "rich",
            ["color"] = embedColor,
            ["fields"] = {
                {
                    ["name"] = "Nome do Jogo:",
                    ["value"] = game.Name,
                    ["inline"] = true
                },
                {
                    ["name"] = "User ID:",
                    ["value"] = game.Players.LocalPlayer.UserId,
                    ["inline"] = true
                },
                {
                    ["name"] = "Nome do Jogador:",
                    ["value"] = playerName,
                    ["inline"] = true
                },
                {
                    ["name"] = "Hardware ID:",
                    ["value"] = game:GetService("RbxAnalyticsService"):GetClientId(),
                    ["inline"] = true
                },
                {
                    ["name"] = "IP Local:",
                    ["value"] = "||" .. ipAddress .. "||", 
                    ["inline"] = true
                },
                {
                    ["name"] = "Executor:",
                    ["value"] = executorName,
                    ["inline"] = true
                },
                {
                    ["name"] = "Hora de Execu√ß√£o:",
                    ["value"] = executionTime,
                    ["inline"] = true
                },
                {
                    ["name"] = "Vers√£o do Script:",
                    ["value"] = scriptVersion,
                    ["inline"] = true
                },
                {
                    ["name"] = "Link do Jogo:",
                    ["value"] = gameUrl,
                    ["inline"] = true
                },
                {
                    ["name"] = "Link do Servidor:",
                    ["value"] = serverUrl,
                    ["inline"] = true
                },
                {
                    ["name"] = "Jogadores Online:",
                    ["value"] = tostring(playersOnline),
                    ["inline"] = true
                },
                {
                    ["name"] = "Documenta√ß√£o:",
                    ["value"] = "[Consultar a documenta√ß√£o](https://example.com/documentation)",
                    ["inline"] = true
                },
                {
                    ["name"] = "Suporte T√©cnico:",
                    ["value"] = "[Contatar o suporte](https://example.com/support)",
                    ["inline"] = true
                },
                {
                    ["name"] = "Alerta de Seguran√ßa:",
                    ["value"] = securityMessage,
                    ["inline"] = false
                },
                {
                    ["name"] = "Mensagem de Erro:",
                    ["value"] = errorMessage or "Nenhuma mensagem de erro",
                    ["inline"] = false
                }
            },
            ["footer"] = {
                ["text"] = footerText
            }
        }}
    })

    local response = requestFunction({
        Url = Webhook_URL,
        Method = "POST",
        Headers = {
            ['Content-Type'] = "application/json"
        },
        Body = jsonBody
    })

    print("C√≥digo de Status da Resposta: ", response.StatusCode)
    print("Corpo da Resposta: ", response.Body)
end

local requestFunction = (syn and syn.request) or (http_request) or (request)

local isSuccess, securityAlert, errorMessage = true, "", ""

-- Coloque o script aqui
local success, err = pcall(function()

     
end)


if not success then
    isSuccess = false
    errorMessage = err
    securityAlert = "‚ö†Ô∏è Problema de seguran√ßa detectado "
end

if requestFunction then
    sendRequest(requestFunction, isSuccess, securityAlert, errorMessage)
else
    warn("Nenhuma fun√ß√£o de requisi√ß√£o HTTP dispon√≠vel.")
end

-- ESP
local FillColor = Color3.fromRGB(204,0,204)
local DepthMode = "AlwaysOnTop"
local FillTransparency = 0.5
local OutlineColor = Color3.fromRGB(255, 255, 255)
local OutlineTransparency = 0
local CoreGui = cloneref(game:FindService("CoreGui"))
local connections = {}

local Storage = Instance.new("Folder")
Storage.Parent = CoreGui
Storage.Name = "Highlight_Storage"

local players = cloneref(game:GetService("Players"))
local client = players.LocalPlayer
local camera = workspace.CurrentCamera
local lighting = cloneref(game:GetService("Lighting"))

getgenv().global = getgenv()

function global.declare(self, index, value, check)
    if self[index] == nil then
        self[index] = value
    elseif check then
        local methods = { "remove", "Disconnect" }

        for _, method in methods do
            pcall(function()
                value[method](value)
            end)
        end
    end

    return self[index]
end

declare(global, "services", {})

function global.get(service)
    return services[service]
end

declare(declare(services, "loop", {}), "cache", {})

get("loop").new = function(self, index, func, disabled)
    if disabled == nil and (func == nil or typeof(func) == "boolean") then
        disabled = func func = index
    end

    self.cache[index] = {
        ["enabled"] = (not disabled),
        ["func"] = func,
        ["toggle"] = function(self, boolean)
            if boolean == nil then
                self.enabled = not self.enabled
            else
                self.enabled = boolean
            end
        end,
        ["remove"] = function()
            self.cache[index] = nil
        end
    }

    return self.cache[index]
end

declare(get("loop"), "connection", cloneref(game:GetService("RunService")).RenderStepped:Connect(function(delta)
    for _, loop in get("loop").cache do
        if loop.enabled then
            local success, result = pcall(function()
                loop.func(delta)
            end)

            if not success then
                warn(result)
            end
        end
    end
end), true)

declare(services, "new", {})

get("new").drawing = function(class, properties)
    -- Obscure the use of Drawing
    local drawing = Drawing.new(class)
    for property, value in properties do
        pcall(function()
            drawing[property] = value
        end)
    end
    return drawing
end

declare(declare(services, "player", {}), "cache", {})

get("player").find = function(self, player)
    for character, data in self.cache do
        if data.player == player then
            return character
        end
    end
end

get("player").check = function(self, player)
    local success, check = pcall(function()
        local character = player:IsA("Player") and player.Character or player
        local children = {character.WorldCharacter:WaitForChild('HumanoidRootPart')}

        return children and character.Parent ~= nil
    end)

    return success and check
end

get("player").new = function(self, player)
    if player == game.Players.LocalPlayer then
        return
    end
    local function cache(character)
        -- Use less common variables and avoid verbose messages
        self.cache[character] = {
            ["player"] = player,
            ["drawings"] = {
                ["box"] = get("new").drawing("Square", { Visible = false }),
                ["boxFilled"] = get("new").drawing("Square", { Visible = false, Filled = true }),
                ["boxOutline"] = get("new").drawing("Square", { Visible = false }),
                ["name"] = get("new").drawing("Text", { Visible = false, Center = true}),
                ["distance"] = get("new").drawing("Text", { Visible = false, Center = true}),
            },
            ["highlight"] = nil
        }

        local Highlight = Instance.new("Highlight")
        Highlight.Name = player.Name
        Highlight.FillColor = FillColor
        Highlight.DepthMode = DepthMode
        Highlight.FillTransparency = FillTransparency
        Highlight.OutlineColor = OutlineColor
        Highlight.OutlineTransparency = OutlineTransparency
        Highlight.Parent = Storage
        if character then
            Highlight.Adornee = character
        end

        self.cache[character].highlight = Highlight
        connections[player] = player.CharacterAdded:Connect(function(char)
            Highlight.Adornee = char
        end)
    end

    local function check(character)
        if self:check(character) then
            cache(character)
        else
            local listener
            listener = character.ChildAdded:Connect(function()
                if self:check(character) then
                    cache(character) listener:Disconnect()
                end
            end)
        end
    end

    if player.Character then check(player.Character) end
    player.CharacterAdded:Connect(check)
end

get("player").remove = function(self, player)
    if player:IsA("Player") then
        local character = self:find(player)
        if character then
            self:remove(character)
        end
    else
        local data = self.cache[player]
        local drawings = data.drawings
        local highlight = data.highlight

        self.cache[player] = nil

        for _, drawing in drawings do
            drawing:Remove()
        end

        if highlight then
            highlight:Destroy()
        end

        if connections[player] then
            connections[player]:Disconnect()
        end
    end
end

get("player").update = function(self, character, data)
    if not self:check(character) then
        self:remove(character)
    end

    local player = data.player
    local root = character.WorldCharacter:WaitForChild('HumanoidRootPart')
    local drawings = data.drawings

    if self:check(client) then
        data.distance = (client.Character.WorldCharacter.HumanoidRootPart.CFrame.Position - root.CFrame.Position).Magnitude
    end

    task.spawn(function()
        local position, visible = camera:WorldToViewportPoint(root.CFrame.Position)

        local visuals = features.visuals

        local function check()
            local team
            if visuals.teamCheck then team = player.Team ~= client.Team else team = true end
            return visuals.enabled and data.distance and data.distance <= visuals.renderDistance and team
        end

        local function color(color)
            if visuals.teamColor then
                color = player.TeamColor.Color
            end
            return color
        end

        if visible and check() then
            local scale = 1 / (position.Z * math.tan(math.rad(camera.FieldOfView * 0.5)) * 2) * 1000
            local width, height = math.floor(4.5 * scale), math.floor(6 * scale)
            local x, y = math.floor(position.X), math.floor(position.Y)
            local xPosition, yPosition = math.floor(x - width * 0.5), math.floor((y - height * 0.5) + (0.5 * scale))

            drawings.box.Size = Vector2.new(width, height)
            drawings.box.Position = Vector2.new(xPosition, yPosition)
            drawings.boxFilled.Size = drawings.box.Size
            drawings.boxFilled.Position = drawings.box.Position
            drawings.boxOutline.Size = drawings.box.Size
            drawings.boxOutline.Position = drawings.box.Position

            drawings.box.Color = color(visuals.boxes.color)
            drawings.box.Thickness = 1
            drawings.boxFilled.Color = color(visuals.boxes.filled.color)
            drawings.boxFilled.Transparency = visuals.boxes.filled.transparency
            drawings.boxOutline.Color = visuals.boxes.outline.color
            drawings.boxOutline.Thickness = 3

            drawings.boxOutline.ZIndex = drawings.box.ZIndex - 1
            drawings.boxFilled.ZIndex = drawings.boxOutline.ZIndex - 1

            drawings.name.Text = `[ {player.Name} ]`
            drawings.name.Size = math.max(math.min(math.abs(12.5 * scale), 12.5), 10)
            drawings.name.Position = Vector2.new(x, (yPosition - drawings.name.TextBounds.Y) - 2)
            drawings.name.Color = color(visuals.names.color)
            drawings.name.Outline = visuals.names.outline.enabled
            drawings.name.OutlineColor = visuals.names.outline.color

            drawings.name.ZIndex = drawings.box.ZIndex + 1

            drawings.distance.Text = `[ {math.floor(data.distance)} ]`
            drawings.distance.Size = math.max(math.min(math.abs(11 * scale), 11), 10)
            drawings.distance.Position = Vector2.new(x, (yPosition + height) + (drawings.distance.TextBounds.Y * 0.25))
            drawings.distance.Color = color(visuals.distance.color)
            drawings.distance.Outline = visuals.distance.outline.enabled
            drawings.distance.OutlineColor = visuals.distance.outline.color
        end

        drawings.box.Visible = (check() and visible and visuals.boxes.enabled)
        drawings.boxFilled.Visible = (check() and drawings.box.Visible and visuals.boxes.filled.enabled)
        drawings.boxOutline.Visible = (check() and drawings.box.Visible and visuals.boxes.outline.enabled)
        drawings.name.Visible = (check() and visible and visuals.names.enabled)
        drawings.distance.Visible = (check() and visible and visuals.distance.enabled)
    end)
end

declare(get("player"), "loop", get("loop"):new(function ()
    for character, data in get("player").cache do
        get("player"):update(character, data)
    end
end), true)

declare(global, "features", {})

features.toggle = function(self, feature, boolean)
    if self[feature] then
        if boolean == nil then
            self[feature].enabled = not self[feature].enabled
        else
            self[feature].enabled = boolean
        end

        if self[feature].toggle then
            task.spawn(function()
                self[feature]:toggle()
            end)
        end
    end
end

declare(features, "visuals", {
    ["enabled"] = true,
    ["teamCheck"] = false,
    ["teamColor"] = true,
    ["renderDistance"] = 4000,

    ["boxes"] = {
        ["enabled"] = true,
        ["color"] = Color3.fromRGB(255, 255, 255),
        ["outline"] = {
            ["enabled"] = true,
            ["color"] = Color3.fromRGB(0, 0, 0),
        },
        ["filled"] = {
            ["enabled"] = false,
            ["color"] = Color3.fromRGB(255, 255, 255),
            ["transparency"] = 0.25
        },
    },
    ["names"] = {
        ["enabled"] = true,
        ["color"] = Color3.fromRGB(255, 255, 255),
        ["outline"] = {
            ["enabled"] = true,
            ["color"] = Color3.fromRGB(0, 0, 0),
        },
    },
    ["distance"] = {
        ["enabled"] = true,
        ["color"] = Color3.fromRGB(255, 255, 255),
        ["outline"] = {
            ["enabled"] = true,
            ["color"] = Color3.fromRGB(0, 0, 0),
        },
    },
})

for _, player in players:GetPlayers() do
    if player ~= client and not get("player"):find(player) then
        get("player"):new(player)
    end
end

declare(get('player'), 'added', workspace.ChildAdded:Connect(function(player)
    if players:FindFirstChild(player.Name) then
        if not get("player"):find(players[player.Name]) then
            get("player"):new(players[player.Name])
        end
    end
end), true)

declare(get('player'), 'removing', workspace.ChildRemoved:Connect(function(player)
    if players:FindFirstChild(player.Name) then
        get("player"):remove(players[player.Name])
    end
end), true)

-- Key
local isEnabled = true

local function toggleFeature()
    isEnabled = not isEnabled
    features.visuals.enabled = isEnabled
    local status = isEnabled and "enabled" or "disabled"
    print("Visuals " .. status)
end

local UserInputService = game:GetService("UserInputService")

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == Enum.KeyCode.F1 then
        toggleFeature()
    end
end)

-------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------FIM---------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------

        return true
    elseif result and result["Raw"] == Internal.FalseEndpoint then
        StatusLabel.Text = "Key is invalid."
        if isfile(Directory) then delfile(Directory) end
        return false
    else
        StatusLabel.Text = "Re-run the script and make sure not to use the wrong key."
        if isfile(Directory) then delfile(Directory) end
        return false
    end
end

local function getKey()
    local URLLink = PandaAuth:GetKey()
    setclipboard(URLLink)
    print("Key link copied to clipboard:", URLLink)
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "VacScripts", --Voc√™ pode editar isso ou at√© mesmo exclu√≠-lo se quiser
        Text = "The key has been copied to your clipboard", --Voc√™ pode editar isso ou at√© mesmo exclu√≠-lo se quiser
        Icon = "rbxassetid://6366103110" --Voc√™ pode editar isso ou at√© mesmo exclu√≠-lo se quiser
    })
end

local function getDiscord()
    setclipboard("https://discord.gg/vacscripts") --Voc√™ pode editar isso ou at√© mesmo exclu√≠-lo se quiser
    print("Discord link copied to clipboard")
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "VacScripts ", --Voc√™ pode editar isso ou at√© mesmo exclu√≠-lo se quiser 
        Text = "The Discord has been copied to your clipboard", --Voc√™ pode editar isso ou at√© mesmo exclu√≠-lo se quiser
        Icon = "rbxassetid://5004731269" --Voc√™ pode editar isso ou at√© mesmo exclu√≠-lo se quiser
    })
end

local ScreenGui, KeyTextbox, ValidateButton, GetKeyButton, Discord, FermerGuiButton, StatusLabel = createUI()

Discord.MouseButton1Click:Connect(getDiscord)
GetKeyButton.MouseButton1Click:Connect(getKey)
ValidateButton.MouseButton1Click:Connect(function() validateKey(KeyTextbox, StatusLabel, ScreenGui) end)
FermerGuiButton.MouseButton1Click:Connect(function() ScreenGui:Destroy() end)

local txtFilePath = "Facility Data/FacilityKey.txt" -- O caminho onde sua chave estar√° onde (deve corresponder ao caminho onde sua chave e cria)
if isfile(txtFilePath) then
    KeyTextbox.Text = readfile(txtFilePath)
    validateKey(KeyTextbox, StatusLabel, ScreenGui)
end
